""" ***********************************************************
\\ File:    Driver.py
// Name:    Nick G. Toth
\\ Email:   ntoth@pdx.edu
// Created: Oct, 2016 / Nov 17th, 2017
\\
// Overview: Test program for the feed-forward neural network
\\ defined in Neuron.py and Network.py. Training data is
// generated by Data.py, and stored in Data.txt.
\\
// ******************************************************** """ 

from Data import *
from Network import *

# Generate random data
genData("Data.txt")

with open("Data.txt") as file:

    # Get network specifications
    fstLine = file.readline( )
    specs = parseFstLn(fstLine)

    # Set layer specifications
    inputs , hidden, outputs = specs[0] , [ ], specs[ len(specs) - 1 ]

    # Save network topology.
    top = [inputs]

    # Checking for multiple hidden layers
    for n in range ( 1, len(specs) - 1 ):
        top.append( specs[n] )

    # Add output layer size
    top.append(outputs)

    net = Network(top) # Create network instance

    # Cycle counter
    cyclecnt = 1

    # Network driver
    while (True):

        # read data line, divide by spaces
        trainingData = file.readline( ).split( )

        if trainingData == [ ]: print "\n\nTraining Complete!"; break # End of file.

        inputVals = list(map(int, trainingData[:inputs]))    # Parse the inputs
        targetVals = list(map(int, trainingData[-outputs:])) # Parse the target outputs

        net.feedForward(inputVals) # Feed new inputs into net
        net.backProp(targetVals)   # Update network weights

        # Get results from the network
        resultVals = net.getResults( )

        # Print network iteration results
        print( '\n\nCycle # {0}\n'.format( cyclecnt) ) # Cycle tracker
        # Input value(s) , target outputs
        print( '\n\tNetwork Input: {0}\n\n\tTargets: {1}' .format( inputVals, targetVals ))
        print( '\n\tNetwork Output: {0}'.format(resultVals) ) # Net outputs
        # Updated network error average
        print( '\n\tLast average error: {0}' .format( net.lstErrAvg ))

        cyclecnt += 1  # Cycle complete, Increment cycle counter
